// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/client"
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String
  hashedPassword String // Stocke le mot de passe ou le PIN haché
  role           Role     @default(STAFF)
  createdAt      DateTime @default(now())

  // L'utilisateur (staff) peut être associé à plusieurs commandes
  orders Order[]
}

model MenuItem {
  id          String       @id @default(cuid())
  name        String
  description String?
  category    CategoryType
  price       Float
  available   Boolean      @default(true)
  createdAt   DateTime     @default(now())
  OrderItem   OrderItem[]
  stock       Int          @default(0)
}

model Order {
  id              String      @id @default(cuid())
  staffId         String // Référence à l'utilisateur (staff) qui a créé la commande
  total           Float
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  pointsUsed      Int?        @default(0)
  pointsEarned    Int?        @default(0)
  customer        Customer?   @relation(fields: [customerId], references: [id])
  customerId      String?
  orderType       OrderType
  notes           String?
  tableNumber     String?
  deliveryAddress String?
  phone           Int?
  orderId         String?

  // Relation avec les éléments de commande
  orderItems OrderItem[]

  // Relation vers le staff ayant pris la commande
  staff User @relation(fields: [staffId], references: [id])
}

model OrderItem {
  id         String @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int

  // Relations
  order    Order    @relation(fields: [orderId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  points    Int      @default(0)
  createdAt DateTime @default(now())
  orders    Order[]

  // Relation avec les transactions de fidélité
  loyaltyTransactions LoyaltyTransaction[]
}

model LoyaltyTransaction {
  id         String          @id @default(cuid())
  customerId String
  points     Int // Points gagnés (positif) ou utilisés (négatif)
  type       TransactionType // EARNED ou REDEEMED
  createdAt  DateTime        @default(now())

  // Relation vers le client
  customer Customer @relation(fields: [customerId], references: [id])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  READY
  PREPARING
  DELIVERED
}

enum TransactionType {
  EARNED
  REDEEMED
}

enum Role {
  ADMIN
  STAFF
  MANAGER
  CASHIER
  WAITER
  KITCHEN
  INVENTORY
  READONLY
}

enum OrderType {
  DINNER
  DELIVERY
  TAKEAWAY
}

enum CategoryType {
  ENTREES          @map("Entrées")
  PLATS_PRINCIPAUX @map("Plats Principaux")
  PIZZAS           @map("Pizzas")
  BURGERS          @map("Burgers")
  SALADES          @map("Salades")
  PATES            @map("Pâtes")
  GRILLADES        @map("Grillades")
  FRUITS_DE_MER    @map("Fruits de Mer")
  SOUPES           @map("Soupes")
  SANDWICHES       @map("Sandwiches")
  ACCOMPAGNEMENTS  @map("Accompagnements")
  VEGAN            @map("Vegan")
  DESSERTS         @map("Desserts")
  BOISSONS         @map("Boissons")
  VINS_ALCOOLS     @map("Vins & Alcools")
  MENU_ENFANT      @map("Menu Enfant")
  PETIT_DEJEUNER   @map("Petit Déjeuner")
  SPECIALITES      @map("Spécialités")
  BIERE            @map("Biere")
  CHAMPAGNE        @map("Champagne")
  GAZEUSE          @map("Gazeuse")
  EAU              @map("Eau")
}
